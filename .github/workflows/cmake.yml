name: Linux Release

on:
  push:
    branches:
      - 'master'
      - 'dev'
    tags:
      - 'v*'
  pull_request:
    branches:
    - 'master'
    - 'dev'

defaults:
  run:
    shell: bash

env:
  SOURCE_DIR:   ${{ github.workspace }}
  QT_VERSION:   5.15.2
  ARTIFACT:     qt-planets-linux-build.AppImage

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive
          
      - name: boost
        run: sudo apt-get update && sudo apt-get install -yq libboost-dev
      - name: Installing system libs
        shell: cmake -P {0}
        run: |
        if ("${{ runner.os }}" STREQUAL "Linux")
          execute_process(
            COMMAND sudo apt install libgl1-mesa-dev
          )
        endif()

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version:      ${{ env.QT_VERSION }}
          host:         linux
          target:       desktop
          arch:         gcc_64
          dir:          ${{ runner.temp }}
          modules:      qtcharts qt3d
          setup-python: false
              
      - name: Create build directory
        run:  mkdir ${{ env.SOURCE_DIR }}/build

      - name: Build
        working-directory: ${{ env.SOURCE_DIR }}/build
        run:  |
              qmake -r ${{ env.SOURCE_DIR }}/planets-qml.pro
              make
              
      - name: AppImage
        working-directory: ${{ env.SOURCE_DIR }}/build
        run: |
          wget -O deploy.AppImage https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod +x deploy.AppImage
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${{ github.workspace }}/Qt/5.15.2/gcc_64/lib/
          cp ${{ env.SOURCE_DIR }}/linux/* .
          ./deploy.AppImage planets-qml.desktop -appimage -no-translations -qmldir=${{ env.SOURCE_DIR }} -extra-plugins=renderers
          mv Qt_planets_app*.AppImage ${{ env.ARTIFACT }}          
      
      - name: Linux artefact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ env.SOURCE_DIR }}/build/${{ env.ARTIFACT }}

              























# name: CMake

# on:
#   push:
#     branches: [ dev ] # master
#   pull_request:
#     branches: [ dev ] # master

# env:
#   QT_VERSION: 5.15.2
#   # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
#   BUILD_TYPE: Release

# jobs:
#   build:
#     # The CMake configure and build commands are platform agnostic and should work equally
#     # well on Windows or Mac.  You can convert this to a matrix build if you need
#     # cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v2
#       # install dependencies
#     - name: boost
#       run: sudo apt-get update && sudo apt-get install -yq libboost-dev
      
#     - name: Installing system libs
#       shell: cmake -P {0}
#       run: |
#         if ("${{ runner.os }}" STREQUAL "Linux")
#           execute_process(
#             COMMAND sudo apt install libgl1-mesa-dev
#           )
#         endif()
        
#     - name: Download Qt
#       id: qt
#       shell: cmake -P {0}
#       run: |
#         set(qt_version $ENV{QT_VERSION})
#         string(REPLACE "." "" qt_version_dotless "${qt_version}")
#         if ("${{ runner.os }}" STREQUAL "Windows")
#           set(url_os "windows_x86")
#           if ("${{ matrix.config.environment_script }}" MATCHES "vcvars64.bat")
#             set(qt_package_name "qt.qt5.${qt_version_dotless}.win64_msvc2017_64")
#             set(qt_dir_prefix "${qt_version}/msvc2017_64")
#           elseif ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
#             set(qt_package_name "qt.qt5.${qt_version_dotless}.win32_msvc2017")
#             set(qt_dir_prefix "${qt_version}/msvc2017")
#           else()
#           endif()
#         elseif ("${{ runner.os }}" STREQUAL "Linux")
#           set(url_os "linux_x64")
#           set(qt_package_name "qt.qt5.${qt_version_dotless}.gcc_64")
#           set(qt_dir_prefix "${qt_version}/gcc_64")
#         elseif ("${{ runner.os }}" STREQUAL "macOS")
#           set(url_os "mac_x64")
#           set(qt_package_name "qt.qt5.${qt_version_dotless}.clang_64")
#           set(qt_dir_prefix "${qt_version}/clang_64")
#         endif()
#         set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/qt5_${qt_version_dotless}")
#         file(DOWNLOAD "${qt_base_url}/Updates.xml" ./Updates.xml SHOW_PROGRESS)
#         file(READ ./Updates.xml updates_xml)
#         string(REGEX MATCH "<Name>${qt_package_name}.*<Version>([0-9+-.]+)</Version>.*<DownloadableArchives>qtbase([a-zA-Z0-9_-]+).7z"
#           updates_xml_output "${updates_xml}")
#         set(package_version ${CMAKE_MATCH_1})
#         set(package_suffix ${CMAKE_MATCH_2})
#         string(REPLACE "-debug-symbols" "" package_suffix "${package_suffix}")
#         # Workaround for CMake's greedy regex
#         if ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
#           string(REPLACE "X86_64" "X86" package_suffix "${package_suffix}")
#         endif()
#         file(MAKE_DIRECTORY qt5)
#         # Save the path for other steps
#         file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt5/${qt_dir_prefix}" qt_dir)
#         message("::set-output name=qt_dir::${qt_dir}")
#         foreach(package qtbase qtdeclarative qttools qtsvg)
#           file(DOWNLOAD
#             "${qt_base_url}/${qt_package_name}/${package_version}${package}${package_suffix}.7z" ./${package}.7z
#             SHOW_PROGRESS
#           )
#           execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${package}.7z WORKING_DIRECTORY qt5)
#         endforeach()
#         file(READ "qt5/${qt_dir_prefix}/mkspecs/qconfig.pri" qtconfig)
#         string(REPLACE "Enterprise" "OpenSource" qtconfig "${qtconfig}")
#         string(REPLACE "licheck.exe" "" qtconfig "${qtconfig}")
#         string(REPLACE "licheck64" "" qtconfig "${qtconfig}")
#         string(REPLACE "licheck_mac" "" qtconfig "${qtconfig}")
#         file(WRITE "qt5/${qt_dir_prefix}/mkspecs/qconfig.pri" "${qtconfig}")


# #     - name: Configure CMake
# #       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
# #       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
# #       run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#     - name: Configure
#         shell: cmake -P {0}
#         run: |
#           if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
#             execute_process(
#               COMMAND "${{ matrix.config.environment_script }}" && set
#               OUTPUT_FILE environment_script_output.txt
#             )
#             file(STRINGS environment_script_output.txt output_lines)
#             foreach(line IN LISTS output_lines)
#               if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
#                 set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
#                 # Set for other steps
#                 message("::set-env name=${CMAKE_MATCH_1}::${CMAKE_MATCH_2}")
#               endif()
#             endforeach()
#           endif()
#           file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qtcreator" qtcreator_dir)
#           execute_process(
#             COMMAND ${{ steps.qt.outputs.qt_dir }}/bin/qmake
#               $ENV{PLUGIN_PRO}
#               CONFIG+=release
#               QTC_SOURCE="${qtcreator_dir}"
#               QTC_BUILD="${qtcreator_dir}"
#             RESULT_VARIABLE result
#           )
#           if (NOT result EQUAL 0)
#             message(FATAL_ERROR "Bad exit status")
#           endif()
#     - name: Build
#       # Build your program with the given configuration
#       run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

# #     - name: Test
# #       working-directory: ${{github.workspace}}/build
# #       # Execute tests defined by the CMake configuration.  
# #       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
# #       run: ctest -C ${{env.BUILD_TYPE}}
      
      
      
